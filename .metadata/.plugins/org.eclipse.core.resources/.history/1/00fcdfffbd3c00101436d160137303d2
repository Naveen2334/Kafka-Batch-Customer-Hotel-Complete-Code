package com.batchnaveen.customerApp.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.Producer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;

import com.batchnaveen.customerApp.constants.AppConstants;
import com.batchnaveen.customerApp.entity.Order;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;

@Configuration
public class KafkaConsumerConfig {

	@Bean
	public DefaultKafkaProducerFactory producerFactory() {

		Map<String, Object> kafkaConfigProps = new HashMap<String, Object>();

		kafkaConfigProps .put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, AppConstants.KAFKA_HOST);
		kafkaConfigProps .put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
		kafkaConfigProps .put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);

		return  new DefaultKafkaProducerFactory(kafkaConfigProps);
		@Bean
		public ConcurrentKafkaListenerContainerFactory<String, Order> kafkaListnerFactory() {

			ConcurrentKafkaListenerContainerFactory<String, Order> factory = 
					new ConcurrentKafkaListenerContainerFactory<>();

			factory.setConsumerFactory(consumerFactory());

			return factory;
		}			

	}
	
}
